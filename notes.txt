pip install psycopg2
pip install python-dotenv
pip install whitenoise

step2:
======
deployment.py:
===============


import os 
from .settings import * 
from .settings import BASE_DIR
import dj_database_url  # This library helps parse database URLs

ALLOWED_HOSTS = [os.environ.get('WEBSITE_HOSTNAME', '')]  
CSRF_TRUSTED_ORIGINS = ['https://' + os.environ.get('WEBSITE_HOSTNAME', '')]
DEBUG = False


# Middleware setup with WhiteNoise for static file serving
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

STATIC_ROOT = os.path.join(BASE_DIR,'staticfiles')

# Database Already Changed to POSTGRE-SQL

connection_string = os.environ.get('AZURE_POSTGRESQL_CONNECTIONSTRING', '')
# parameters = {pair.split('='):pair.split('=')[1] for pair in connection_string.split(' ') }  If using sql-lite

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.postgresql',
#         'NAME': parameters['dbname'],             
#         'USER': parameters['user'],            
#         'PASSWORD': parameters['password'],      
#         'HOST': parameters['host']              
#     }
# }

if connection_string:
    DATABASES = {
        'default': dj_database_url.parse(connection_string, conn_max_age=600, ssl_require=True)
    }
else:
    # Optional: Fallback or error handling if connection string is missing
    print("Warning: AZURE_POSTGRESQL_CONNECTIONSTRING environment variable not set.")
    # Raise an error, fallback to local DB, or handle as needed
    
    
============================================================================================================


step3:
======
adding settings in wsgi.py for azzure deployment and for local host
settings_module = 'PortalProject.deployment' if 'WEBSITE_HOSTNAME' in os.environ else 'PortalProject.settings'


step4:
======
requirements.txt

all the dependencies that we used in the project ==> Azure needs to know this so we use this file to 
let azzure know about all the installed dependencies

pip freeze > requirements.txt
=> create requirements.txt

===> Venv:
==========
python -m venv venv

.\venv\Scripts\activate


for passwords and stuff:
========================
created .env file in the project's root directory

CHATGPT LINK: https://chatgpt.com/share/672d82ad-0498-8005-b670-71e727c2209d



step5:
======
.production


step6:
======
.gitignore



vid2:
=====

git config --global user.name "Your Name"
git config --global user.email "your@email.com"

git config --global push.default matching
git config --global alias.co checkout

git init

git add .
git commit -am "first commit"
=> If making any changes again then use 
git add .
git commit -am "changes made"



=> Create a repo in the github:
==============================


git remote add origin https://github.com/NTanayK/Django-Deploy.git
git branch -M main
git push -u origin main


If changes made after adding the project to git:
================================================
git add .
git commit -am "changes made"
git push 


vid3:
=====
Need Azure Now


s1 => Resource-group
    Create => select the subscription and all the other Resource Groups
    Region => Select the region that is closest to use
    end => create


s2 => search: App Services
    => Create --> Web App + Database
    select the resource group that we just now created 
    Name: url that finds the app => LVPEIWorkshop
    select Python 3.7.0
    No - No 
    Plan as per requirements
    --> Review + Create


s3 => 

    